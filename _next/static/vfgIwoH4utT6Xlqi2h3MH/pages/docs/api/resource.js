(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"33Qh":function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/api/resource",function(){return t("iiM4")}])},iiM4:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return u});var o=t("kOwS"),a=t("qNsG"),r=t("q1tI"),s=t.n(r),c=t("E/Ix"),i=(s.a.createElement,{}),p="wrapper";function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(c.b)(p,Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"resource"},"Resource"),Object(c.b)("p",null,"Resource glues together the functionality of Cache and Fetch with a more\nexpressive interface. Since Fetch is limited to handle only the ",Object(c.b)("inlineCode",{parentName:"p"},"GET")," method\nfor a particular endpoint, Resource expands on this to allow additional or\nrelated operations to be declared and exposed to children via ",Object(c.b)("inlineCode",{parentName:"p"},"actions"),"."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"React.Component<ResourceProps, ResourceState>\n")),Object(c.b)("h2",{id:"props"},"Props"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"type Action = any => {\n  url?: string,\n  options?: RequestOptions,\n  maxAge?: number,\n  invalidates?: Array<string>\n};\n\ntype ResourceProps = {\n  url: string,\n  options: RequestOptions,\n  maxAge: number,\n  actions: { [key: string]: Action },\n  children?: ResourceState => React.Node,\n\n  /* advanced options */\n  fetcher: Fetcher\n};\n")),Object(c.b)("h2",{id:"state"},"State"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"type FetchState = {\n  pending: boolean,\n  rejected: boolean,\n  fulfilled: boolean,\n  value: ?any,\n  reason: ?Error\n  invalidate: () => void,\n  read: () => void,\n  refresh: () => void\n};\n\ntype ResourceState = {\n  state: FetchState,\n  actions: {\n    [key: string]: (*) => Promise<*>\n  },\n  meta: ResourceProps\n};\n")),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// resources/users/User.js\n\nimport React from "react";\nimport { Resource } from "rsrc";\nimport Form from "./Form";\n\nexport default ({ id }) => {\n  const url = `https://api.example.com/users/${id}`;\n  const options = {\n    method: "GET",\n    headers: {\n      "Content-Type": "application/json; charset=UTF-8"\n    }\n  };\n  const maxAge = 60 * 60; // 1 hour\n\n  const update = data => ({\n    url,\n    options: {\n      ...options,\n      method: "PATCH",\n      body: JSON.stringify(data)\n    },\n    invalidates: [url]\n  });\n\n  return (\n    <Resource url={url} options={options} maxAge={maxAge} actions={{ update }}>\n      {resource => {\n        const { state, actions } = resource;\n\n        if (state.pending) return "Loading...";\n\n        if (state.rejected) return "Error";\n\n        const handleSubmit = formValues => {\n          actions\n            .update(formValues)\n            .then(value => console.log("Success", value))\n            .catch(error => console.log("Fail", error.message));\n        };\n\n        const { name, email } = state.value;\n\n        return <Form initialState={{ name, email }} onSubmit={handleSubmit} />;\n      }}\n    </Resource>\n  );\n};\n')))}u.isMDXComponent=!0}},[["33Qh",1,0]]]);