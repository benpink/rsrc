(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{S6vE:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/api/resource",function(){return t("jtPh")}])},jtPh:function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return d});var o=t("z3IF"),r=t("2Fjn"),a=t("mXGw"),s=t.n(a),c=t("SAVP"),i=(s.a.createElement,{}),l="wrapper";function d(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(c.b)(l,Object(o.a)({},i,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"resource"},"Resource"),Object(c.b)("p",null,"Resource glues together the functionality of Cache and Fetch with a more\nexpressive interface. If Fetch represents an individual request state, a\nResource can be thought of as a more generic description that defines\nadditional actions for a given endpoint."),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"React.Component<ResourceProps, ResourceState>\n")),Object(c.b)("h2",{id:"props"},"Props"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"type ResourceProps = {\n  url: string,\n  options: RequestOptions,\n  maxAge: number,\n  actions: { [key: string]: Action },\n  children?: ResourceState => React.Node,\n\n  /* advanced options */\n  fetcher: Fetcher\n};\n\ntype Action = any => {\n  url?: string,\n  options?: RequestOptions,\n  maxAge?: number,\n  invalidates?: Array<string>\n};\n")),Object(c.b)("h2",{id:"resourcestate"},"ResourceState"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-js"}),"type PromiseState = {\n  pending: boolean,\n  rejected: boolean,\n  fulfilled: boolean,\n  value: ?any,\n  reason: ?Error\n};\n\ntype FetchState = PromiseState & {\n  invalidate: () => void,\n  read: () => void,\n  refresh: () => void\n};\n\ntype ResourceState = {\n  state: FetchState,\n  actions: {\n    [key: string]: (*) => Promise<PromiseState>\n  },\n  meta: ResourceProps\n};\n")),Object(c.b)("h2",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// src/resources/todos/Todos.js\n\nimport React from "react";\n\nconst url = "https://jsonplaceholder.typicode.com/todos";\n\nconst Todos = ({ children }) => (\n  <Resource\n    url={url}\n    actions={{\n      markComplete: id => ({\n        url: `${url}/${id}`,\n        invalidates: [url],\n        options: {\n          method: "PUT",\n          body: JSON.stringify({ completed: true })\n        }\n      })\n    }}\n  >\n    {children}\n  </Resource>\n);\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// src/resources/todos/List.js\n\nimport React from "react";\n\nconst TodoList = ({ todos, onClick }) => (\n  <ul>\n    {todos.map(todo => (\n      <li key={todo.id}>\n        <button onClick={() => onClick(todo.id)}>\xd7</button>\n        {todo.title}\n      </li>\n    ))}\n  </ul>\n);\n')),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'// src/App.js\n\nimport React from "react";\n\nconst App = () => (\n  <Todos>\n    {({ state, action }) => {\n      if (state.rejected) return <Error error={state.reason} />;\n\n      if (state.pending) return <Loading />;\n\n      const handleClick = id => {\n        actions\n          .markComplete(id)\n          .then(fetchState => {\n            console.log("woot");\n          })\n          .catch(error => {\n            console.warn("boo");\n          });\n      };\n\n      return <TodosList todos={state.value} onClick={handleClick} />;\n    }}\n  </Todos>\n);\n')))}d.isMDXComponent=!0}},[["S6vE",1,0]]]);