(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"7GOo":function(e,t,a){"use strict";a.r(t),a.d(t,"default",function(){return l});var n=a("z3IF"),r=a("2Fjn"),o=a("mXGw"),c=a.n(o),i=a("SAVP"),s=(c.a.createElement,{}),b="wrapper";function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)(b,Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"There are a number of great solutions for mananging async fetch state in the\nReact ecosystem but many of these often require a non-trivial amount of\nboilerplate or framework knowledge to implement and maintain."),Object(i.b)("p",null,"This project attempts to identify and abstract generic fetch state utilities\ninto composable components that are as flexible and expressive as the underlying\ntechnologies they expose."),Object(i.b)("p",null,"For more on the backstory, please check out the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://building.signalsciences.com/introducing-rsrc"}),"announcement")," on the\n",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://building.signalsciences.com/"}),"Signal Sciences blog"),"."),Object(i.b)("h2",{id:"motivation"},"Motivation"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"reduce dependence on common boilerplate for managing fetch state"),Object(i.b)("li",{parentName:"ul"},"encourage a declarative approach to resource operations"),Object(i.b)("li",{parentName:"ul"},"facilitate the collocation of resource descriptors with the components that\ndepend on them"),Object(i.b)("li",{parentName:"ul"},"simplify cache management and invalidation")),Object(i.b)("h2",{id:"what-does-this-do"},"What does this do?"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})),Object(i.b)("th",Object(n.a)({parentName:"tr"},{align:null})))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Cache")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Cache is a context provider that exposes a ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map"}),"map"),"-like interface. This should be mounted near the top of your application tree similar to other context providers.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Fetch")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Fetch is a component that exposes a declarative interface for the ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"}),"fetch")," api. Its main job is to translate ",Object(i.b)("a",Object(n.a)({parentName:"td"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"}),"promise")," state into consumable props and provide methods to read, invalidate, and refresh fetch states.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(i.b)("strong",{parentName:"td"},"Resource")),Object(i.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Resource glues together the above functionality with a more expressive interface. If Fetch represents an individual request state, a Resource can be thought of as a more generic entity description that defines and exposes additional or related actions for a given endpoint.")))),Object(i.b)("h2",{id:"what-doesnt-this-do"},"What doesn't this do?"),Object(i.b)("p",null,"Server-side rendering (SSR), and cache initialization from serialized state are\nnot supported out of the box. This is because rsrc leverages raw promises rather\nthan serialized objects to persist state internally."),Object(i.b)("p",null,"That said, the cache component accepts any map-like interface, so it should be\npossible to serialize resolved states, and then rewrap them in promises before\npassing along to the cache provider."),Object(i.b)("h2",{id:"references--credits"},"References & Credits"),Object(i.b)("p",null,"Related projects, inspiration, and references:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(n.a)({parentName:"li"},{href:"https://github.com/heroku/react-refetch"}),"heroku/react-refetch"))))}l.isMDXComponent=!0},gII0:function(e,t,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/getting-started/introduction",function(){return a("7GOo")}])}},[["gII0",1,0]]]);